describe("Spies",function(){it("should replace the specified function with a spy object",function(){var e=!1,t={someFunction:function(){e=!0}};this.spyOn(t,"someFunction"),expect(t.someFunction.wasCalled).toEqual(!1),expect(t.someFunction.callCount).toEqual(0),t.someFunction("foo"),expect(t.someFunction.wasCalled).toEqual(!0),expect(t.someFunction.callCount).toEqual(1),expect(t.someFunction.mostRecentCall.args).toEqual(["foo"]),expect(t.someFunction.mostRecentCall.object).toEqual(t),expect(e).toEqual(!1),t.someFunction("bar"),expect(t.someFunction.callCount).toEqual(2),expect(t.someFunction.mostRecentCall.args).toEqual(["bar"])}),it("should allow you to view args for a particular call",function(){var e=!1,t={someFunction:function(){e=!0}};this.spyOn(t,"someFunction"),t.someFunction("foo"),t.someFunction("bar"),expect(t.someFunction.calls[0].args).toEqual(["foo"]),expect(t.someFunction.calls[1].args).toEqual(["bar"]),expect(t.someFunction.mostRecentCall.args).toEqual(["bar"])}),it("should be possible to call through to the original method, or return a specific result",function(){var e=!1,t,n,r={someFunction:function(){return e=!0,t=arguments,n=this,"return value from original function"}};this.spyOn(r,"someFunction").andCallThrough();var i=r.someFunction("arg1","arg2");expect(i).toEqual("return value from original function"),expect(e).toEqual(!0),expect(t).toEqual(["arg1","arg2"]),expect(n).toEqual(r),expect(r.someFunction.wasCalled).toEqual(!0)}),it("should be possible to return a specific value",function(){var e=!1,t={someFunction:function(){return e=!0,"return value from original function"}};this.spyOn(t,"someFunction").andReturn("some value"),e=!1;var n=t.someFunction("arg1","arg2");expect(n).toEqual("some value"),expect(e).toEqual(!1)}),it("should be possible to throw a specific error",function(){var e=!1,t={someFunction:function(){return e=!0,"return value from original function"}};this.spyOn(t,"someFunction").andThrow(new Error("fake error"));var n;try{t.someFunction("arg1","arg2")}catch(r){n=r}expect(n.message).toEqual("fake error"),expect(e).toEqual(!1)}),it("should be possible to call a specified function",function(){var e=!1,t=!1,n,r,i={someFunction:function(){return e=!0,"return value from original function"}};this.spyOn(i,"someFunction").andCallFake(function(){return t=!0,n=arguments,r=this,"return value from fake function"});var s=i.someFunction("arg1","arg2");expect(s).toEqual("return value from fake function"),expect(e).toEqual(!1),expect(t).toEqual(!0),expect(n).toEqual(["arg1","arg2"]),expect(r).toEqual(i),expect(i.someFunction.wasCalled).toEqual(!0)}),it("is torn down when this.removeAllSpies is called",function(){var e=!1,t={someFunction:function(){e=!0}};this.spyOn(t,"someFunction"),t.someFunction("foo"),expect(e).toEqual(!1),this.removeAllSpies(),t.someFunction("foo"),expect(e).toEqual(!0)}),it("calls removeAllSpies during spec finish",function(){var e=new jasmine.Spec(new jasmine.Env,{},"sample test");this.spyOn(e,"removeAllSpies"),e.finish(),expect(e.removeAllSpies).wasCalled()}),it("throws an exception when some method is spied on twice",function(){var e={someFunction:function(){}};this.spyOn(e,"someFunction");var t;try{this.spyOn(e,"someFunction")}catch(n){t=n}expect(t).toBeDefined()}),it("to spy on an undefined method throws exception",function(){function e(){this.spyOn(t,"someOtherFunction")}var t={someFunction:function(){}};expect(function(){e()}).toThrow("someOtherFunction() method does not exist")}),it("should be able to reset a spy",function(){var e={someFunction:function(){}};this.spyOn(e,"someFunction"),expect(e.someFunction).not.toHaveBeenCalled(),e.someFunction(),expect(e.someFunction).toHaveBeenCalled(),e.someFunction.reset(),expect(e.someFunction).not.toHaveBeenCalled(),expect(e.someFunction.callCount).toEqual(0)}),describe("createSpyObj",function(){it("should create an object with a bunch of spy methods when you call jasmine.createSpyObj()",function(){var e=jasmine.createSpyObj("BaseName",["method1","method2"]);expect(e).toEqual({method1:jasmine.any(Function),method2:jasmine.any(Function)}),expect(e.method1.identity).toEqual("BaseName.method1"),expect(e.method2.identity).toEqual("BaseName.method2")}),it("should throw if you do not pass an array argument",function(){expect(function(){jasmine.createSpyObj("BaseName")}).toThrow("createSpyObj requires a non-empty array of method names to create spies for")}),it("should throw if you pass an empty array argument",function(){expect(function(){jasmine.createSpyObj("BaseName")}).toThrow("createSpyObj requires a non-empty array of method names to create spies for")})})});