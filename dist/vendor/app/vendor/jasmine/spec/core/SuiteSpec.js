describe("Suite",function(){var e,t;beforeEach(function(){t=new jasmine.Env,t.updateInterval=0,e=new jasmine.FakeTimer,t.setTimeout=e.setTimeout,t.clearTimeout=e.clearTimeout,t.setInterval=e.setInterval,t.clearInterval=e.clearInterval}),describe("Specs",function(){var e;beforeEach(function(){e=t.describe("Suite 1",function(){t.it("Spec 1",function(){this.runs(function(){this.expect(!0).toEqual(!0)})}),t.it("Spec 2",function(){this.runs(function(){this.expect(!0).toEqual(!0)})}),t.describe("Suite 2",function(){t.it("Spec 3",function(){this.runs(function(){this.expect(!0).toEqual(!0)})})}),t.it("Spec 4",function(){this.runs(function(){this.expect(!0).toEqual(!0)})})})}),it("#specs should return all immediate children that are specs.",function(){var t=e.specs();expect(t.length).toEqual(3),expect(t[0].description).toEqual("Spec 1"),expect(t[1].description).toEqual("Spec 2"),expect(t[2].description).toEqual("Spec 4")}),it("#suites should return all immediate children that are suites.",function(){var t=e.suites();expect(t.length).toEqual(1),expect(t[0].description).toEqual("Suite 2")}),it("#children should return all immediate children including suites and specs.",function(){var t=e.children();expect(t.length).toEqual(4),expect(t[0].description).toEqual("Spec 1"),expect(t[1].description).toEqual("Spec 2"),expect(t[2].description).toEqual("Suite 2"),expect(t[3].description).toEqual("Spec 4")})}),describe("SpecCount",function(){it("should keep a count of the number of specs that are run",function(){var e=t.describe("one suite description",function(){t.it("should be a test",function(){this.runs(function(){this.expect(!0).toEqual(!0)})}),t.it("should be another test",function(){this.runs(function(){this.expect(!0).toEqual(!0)})}),t.it("should be a third test",function(){this.runs(function(){this.expect(!0).toEqual(!0)})})});expect(e.specs().length).toEqual(3)}),it("specCount should be correct even with runs/waits blocks",function(){var e=t.describe("one suite description",function(){t.it("should be a test",function(){this.runs(function(){this.expect(!0).toEqual(!0)})}),t.it("should be another test",function(){this.runs(function(){this.expect(!0).toEqual(!0)}),this.waits(10),this.runs(function(){this.expect(!0).toEqual(!0)})}),t.it("should be a third test",function(){this.runs(function(){this.expect(!0).toEqual(!0)})})});expect(e.specs().length).toEqual(3)})})});