describe("jasmine.Matchers",function(){function e(e){return i.expect(e)}function t(){return i.addMatcherResult.mostRecentCall.args[0]}function n(e){try{e.call()}catch(t){return t}throw new Error("expected function to throw an exception")}var r,i;beforeEach(function(){r=new jasmine.Env,r.updateInterval=0;var e=r.describe("suite",function(){i=r.it("spec",function(){})});spyOn(i,"addMatcherResult"),this.addMatchers({toPass:function(){return t().passed()},toFail:function(){return!t().passed()}})}),it("toEqual with primitives, objects, dates, etc.",function(){expect(e(!0).toEqual(!0)).toPass(),expect(e({foo:"bar"}).toEqual(null)).toFail();var t=function(){return"hi"},n=function(){return"hi"};expect(e({foo:t}).toEqual({foo:n})).toFail(),expect(e({foo:t}).toEqual({foo:t})).toPass(),expect(e(!1).toEqual(!0)).toFail();var r={};r.referenceToSelf=r,expect(e(r).toEqual(r)).toPass(),expect(e(new Date(2008,1,3,15,17,19,1234)).toEqual(new Date(2009,1,3,15,17,19,1234))).toFail(),expect(e(new Date(2008,1,3,15,17,19,1234)).toEqual(new Date(2008,1,3,15,17,19,1234))).toPass(),expect(e(!0).toNotEqual(!1)).toPass(),expect(e(!0).toNotEqual(!0)).toFail(),expect(e(["a","b"]).toEqual(["a",jasmine.undefined])).toFail(),expect(e(["a","b"]).toEqual(["a","b",jasmine.undefined])).toFail(),expect(e("cat").toEqual("cat")).toPass(),expect(e("cat").toNotEqual("cat")).toFail(),expect(e(5).toEqual(5)).toPass(),expect(e(parseInt("5",10)).toEqual(5)).toPass(),expect(e(5).toNotEqual(5)).toFail(),expect(e(parseInt("5",10)).toNotEqual(5)).toFail(),expect(e(/1/i).toEqual(/1/i)).toPass(),expect(e(/1/i).toNotEqual(/1/i)).toFail(),expect(e(/[abc]/gm).toEqual(/1/i)).toFail(),expect(e(/[abc]/gm).toNotEqual(/1/i)).toPass();if(RegExp.prototype.sticky!==undefined){var i=new RegExp("[abc]","y");expect(e(i).toEqual(/1/i)).toFail(),expect(e(i).toNotEqual(/1/i)).toPass()}}),it("toEqual to build an Expectation Result",function(){var n="a",r=e(n),i="b";r.toEqual(i);var s=t();expect(s.matcherName).toEqual("toEqual"),expect(s.passed()).toFail(),expect(s.message).toMatch(jasmine.pp(n)),expect(s.message).toMatch(jasmine.pp(i)),expect(s.expected).toEqual(i),expect(s.actual).toEqual(n)}),it("toNotEqual to build an Expectation Result",function(){var n="a",r=e(n);r.toNotEqual(n);var i=t();expect(i.matcherName).toEqual("toNotEqual"),expect(i.passed()).toFail(),expect(i.message).toMatch(jasmine.pp(n)),expect(i.message).toMatch("not"),expect(i.expected).toEqual(n),expect(i.actual).toEqual(n)}),it("toBe should return true only if the expected and actual items === each other",function(){var t={},n={},r=t;expect(e(t).toBe(n)).toFail(),expect(e(t).toBe(t)).toPass(),expect(e(t).toBe(r)).toPass(),expect(e(t).toNotBe(n)).toPass(),expect(e(t).toNotBe(t)).toFail(),expect(e(t).toNotBe(r)).toFail()}),it("toBe to build an ExpectationResult",function(){var n="b",r="a",i=e(r);i.toBe(n);var s=t();expect(s.matcherName).toEqual("toBe"),expect(s.passed()).toFail(),expect(s.message).toMatch(jasmine.pp(r)),expect(s.message).toMatch(jasmine.pp(n)),expect(s.expected).toEqual(n),expect(s.actual).toEqual(r)}),it("toNotBe to build an ExpectationResult",function(){var n="a",r=e(n);r.toNotBe(n);var i=t();expect(i.matcherName).toEqual("toNotBe"),expect(i.passed()).toFail(),expect(i.message).toMatch(n),expect(i.expected).toEqual(n),expect(i.actual).toEqual(n)}),it("toMatch and #toNotMatch should perform regular expression matching on strings",function(){expect(e("foobarbel").toMatch(/bar/)).toPass(),expect(e("foobazbel").toMatch(/bar/)).toFail(),expect(e("foobarbel").toMatch("bar")).toPass(),expect(e("foobazbel").toMatch("bar")).toFail(),expect(e("foobarbel").toNotMatch(/bar/)).toFail(),expect(e("foobazbel").toNotMatch(/bar/)).toPass(),expect(e("foobarbel").toNotMatch("bar")).toFail(),expect(e("foobazbel").toNotMatch("bar")).toPass()}),it("toMatch w/ RegExp to build an ExpectationResult",function(){var n="a",r=e(n),i=/b/;r.toMatch(i);var s=t();expect(s.matcherName).toEqual("toMatch"),expect(s.passed()).toFail(),expect(s.message).toMatch(jasmine.pp(n)),expect(s.message).toMatch(i.toString()),expect(s.expected).toEqual(i),expect(s.actual).toEqual(n)}),it("toMatch w/ String to build an ExpectationResult",function(){var n="a",r=e(n),i="b";r.toMatch(i);var s=t();expect(s.matcherName).toEqual("toMatch"),expect(s.passed()).toFail(),expect(s.message).toEqual("Expected 'a' to match 'b'."),expect(s.expected).toEqual(i),expect(s.actual).toEqual(n)}),it("toNotMatch w/ RegExp to build an ExpectationResult",function(){var n="a",r=e(n),i=/a/;r.toNotMatch(i);var s=t();expect(s.matcherName).toEqual("toNotMatch"),expect(s.passed()).toFail(),expect(s.message).toEqual("Expected 'a' to not match /a/."),expect(s.expected).toEqual(i),expect(s.actual).toEqual(n)}),it("toNotMatch w/ String to build an ExpectationResult",function(){var n="a",r=e(n);r.toNotMatch(n);var i=t();expect(i.matcherName).toEqual("toNotMatch"),expect(i.passed()).toFail(),expect(i.message).toEqual("Expected 'a' to not match 'a'."),expect(i.expected).toEqual(n),expect(i.actual).toEqual(n)}),it("toBeDefined",function(){expect(e("foo").toBeDefined()).toPass(),expect(e(jasmine.undefined).toBeDefined()).toFail()}),it("toBeDefined to build an ExpectationResult",function(){var n=e(jasmine.undefined);n.toBeDefined();var r=t();expect(r.matcherName).toEqual("toBeDefined"),expect(r.passed()).toFail(),expect(r.message).toEqual("Expected undefined to be defined."),expect(r.actual).toEqual(jasmine.undefined)}),it("toBeUndefined",function(){expect(e("foo").toBeUndefined()).toFail(),expect(e(jasmine.undefined).toBeUndefined()).toPass()}),it("toBeNull",function(){expect(e(null).toBeNull()).toPass(),expect(e(jasmine.undefined).toBeNull()).toFail(),expect(e("foo").toBeNull()).toFail()}),it("toBeNull w/ String to build an ExpectationResult",function(){var n="a",r=e(n);r.toBeNull();var i=t();expect(i.matcherName).toEqual("toBeNull"),expect(i.passed()).toFail(),expect(i.message).toMatch(jasmine.pp(n)),expect(i.message).toMatch("null"),expect(i.actual).toEqual(n)}),it("toBeNull w/ Object to build an ExpectationResult",function(){var n={a:"b"},r=e(n);r.toBeNull();var i=t();expect(i.matcherName).toEqual("toBeNull"),expect(i.passed()).toFail(),expect(i.message).toMatch(jasmine.pp(n)),expect(i.message).toMatch("null"),expect(i.actual).toEqual(n)}),it("toBeNaN",function(){expect(e(Number.NaN).toBeNaN()).toPass(),expect(e(0).toBeNaN()).toFail(),expect(e(1).toBeNaN()).toFail(),expect(e(null).toBeNaN()).toFail(),expect(e(Number.POSITIVE_INFINITY).toBeNaN()).toFail(),expect(e(Number.NEGATIVE_INFINITY).toBeNaN()).toFail(),expect(e("NaN").toBeNaN()).toFail()}),it("toBeNaN to build an ExpectationResult",function(){var n="a",r=e(n);r.toBeNaN();var i=t();expect(i.matcherName).toEqual("toBeNaN"),expect(i.passed()).toFail(),expect(i.message).toMatch("Expected 'a' to be NaN."),expect(i.actual).toMatch(n)}),it("toBeFalsy",function(){expect(e(!1).toBeFalsy()).toPass(),expect(e(!0).toBeFalsy()).toFail(),expect(e(jasmine.undefined).toBeFalsy()).toPass(),expect(e(0).toBeFalsy()).toPass(),expect(e("").toBeFalsy()).toPass()}),it("toBeFalsy to build an ExpectationResult",function(){var n="a",r=e(n);r.toBeFalsy();var i=t();expect(i.matcherName).toEqual("toBeFalsy"),expect(i.passed()).toFail(),expect(i.message).toMatch(jasmine.pp(n)),expect(i.message).toMatch("falsy"),expect(i.actual).toEqual(n)}),it("toBeTruthy",function(){expect(e(!1).toBeTruthy()).toFail(),expect(e(!0).toBeTruthy()).toPass(),expect(e(jasmine.undefined).toBeTruthy()).toFail(),expect(e(0).toBeTruthy()).toFail(),expect(e("").toBeTruthy()).toFail(),expect(e("hi").toBeTruthy()).toPass(),expect(e(5).toBeTruthy()).toPass(),expect(e({foo:1}).toBeTruthy()).toPass()}),it("toBeTruthy to build an ExpectationResult",function(){var n=e(!1);n.toBeTruthy();var r=t();expect(r.matcherName).toEqual("toBeTruthy"),expect(r.passed()).toFail(),expect(r.message).toEqual("Expected false to be truthy."),expect(r.actual).toFail()}),it("toEqual",function(){expect(e(jasmine.undefined).toEqual(jasmine.undefined)).toPass(),expect(e({foo:"bar"}).toEqual({foo:"bar"})).toPass(),expect(e("foo").toEqual({bar:jasmine.undefined})).toFail(),expect(e({foo:jasmine.undefined}).toEqual("goo")).toFail(),expect(e({foo:{bar:jasmine.undefined}}).toEqual("goo")).toFail()}),it("toEqual with jasmine.any()",function(){expect(e("foo").toEqual(jasmine.any(String))).toPass(),expect(e(3).toEqual(jasmine.any(Number))).toPass(),expect(e("foo").toEqual(jasmine.any(Function))).toFail(),expect(e("foo").toEqual(jasmine.any(Object))).toFail(),expect(e({someObj:"foo"}).toEqual(jasmine.any(Object))).toPass(),expect(e({someObj:"foo"}).toEqual(jasmine.any(Function))).toFail(),expect(e(function(){}).toEqual(jasmine.any(Object))).toFail(),expect(e(["foo","goo"]).toEqual(["foo",jasmine.any(String)])).toPass(),expect(e(function(){}).toEqual(jasmine.any(Function))).toPass(),expect(e(["a",function(){}]).toEqual(["a",jasmine.any(Function)])).toPass()}),describe("toEqual with an object implementing jasmineMatches",function(){var t;beforeEach(function(){t={jasmineMatches:jasmine.createSpy("jasmineMatches")}}),describe("on the left side",function(){it("uses the jasmineMatches function",function(){t.jasmineMatches.andReturn(!1),expect(e(t).toEqual("foo")).toFail(),t.jasmineMatches.andReturn(!0),expect(e(t).toEqual("foo")).toPass()})}),describe("on the right side",function(){it("uses the jasmineMatches function",function(){t.jasmineMatches.andReturn(!1),expect(e("foo").toEqual(t)).toFail(),t.jasmineMatches.andReturn(!0),expect(e("foo").toEqual(t)).toPass()})})}),it("toEqual handles circular objects ok",function(){expect(e({foo:"bar",baz:jasmine.undefined}).toEqual({foo:"bar",baz:jasmine.undefined})).toPass(),expect(e({foo:["bar","baz","quux"]}).toEqual({foo:["bar","baz","quux"]})).toPass(),expect(e({foo:{bar:"baz"},quux:"corge"}).toEqual({foo:{bar:"baz"},quux:"corge"})).toPass();var t={},n={};t.field=t,n.field=n,expect(e(t).toEqual(n)).toPass()}),it("toNotEqual as slightly surprising behavior, but is it intentional?",function(){expect(e({x:"x",y:"y",z:"w"}).toNotEqual({x:"x",y:"y",z:"z"})).toPass(),expect(e({x:"x",y:"y",w:"z"}).toNotEqual({x:"x",y:"y",z:"z"})).toPass(),expect(e({x:"x",y:"y",z:"z"}).toNotEqual({w:"w",x:"x",y:"y",z:"z"})).toPass(),expect(e({w:"w",x:"x",y:"y",z:"z"}).toNotEqual({x:"x",y:"y",z:"z"})).toPass()}),it("toEqual handles arrays",function(){expect(e([1,"A"]).toEqual([1,"A"])).toPass()}),it("toContain and toNotContain",function(){expect(e("ABC").toContain("A")).toPass(),expect(e("ABC").toContain("X")).toFail(),expect(e(["A","B","C"]).toContain("A")).toPass(),expect(e(["A","B","C"]).toContain("F")).toFail(),expect(e(["A","B","C"]).toNotContain("F")).toPass(),expect(e(["A","B","C"]).toNotContain("A")).toFail(),expect(e(["A",{some:"object"},"C"]).toContain({some:"object"})).toPass(),expect(e(["A",{some:"object"},"C"]).toContain({some:"other object"})).toFail()}),it("toContain to build an ExpectationResult",function(){var n=["a","b","c"],r=e(n),i="x";r.toContain(i);var s=t();expect(s.matcherName).toEqual("toContain"),expect(s.passed()).toFail(),expect(s.message).toMatch(jasmine.pp(n)),expect(s.message).toMatch("contain"),expect(s.message).toMatch(jasmine.pp(i)),expect(s.actual).toEqual(n),expect(s.expected).toEqual(i)}),it("toNotContain to build an ExpectationResult",function(){var n=["a","b","c"],r=e(n),i="b";r.toNotContain(i);var s=t();expect(s.matcherName).toEqual("toNotContain"),expect(s.passed()).toFail(),expect(s.message).toMatch(jasmine.pp(n)),expect(s.message).toMatch("not contain"),expect(s.message).toMatch(jasmine.pp(i)),expect(s.actual).toEqual(n),expect(s.expected).toEqual(i)}),it("toBeLessThan should pass if actual is less than expected",function(){expect(e(37).toBeLessThan(42)).toPass(),expect(e(37).toBeLessThan(-42)).toFail(),expect(e(37).toBeLessThan(37)).toFail()}),it("toBeLessThan to build an ExpectationResult",function(){var n=3,r=e(n),i=1;r.toBeLessThan(i);var s=t();expect(s.matcherName).toEqual("toBeLessThan"),expect(s.passed()).toFail(),expect(s.message).toMatch(jasmine.pp(n)+" to be less than"),expect(s.message).toMatch(jasmine.pp(i)),expect(s.actual).toEqual(n),expect(s.expected).toEqual(i)}),it("toBeGreaterThan should pass if actual is greater than expected",function(){expect(e(37).toBeGreaterThan(42)).toFail(),expect(e(37).toBeGreaterThan(-42)).toPass(),expect(e(37).toBeGreaterThan(37)).toFail()}),it("toBeGreaterThan to build an ExpectationResult",function(){var n=1,r=e(n),i=3;r.toBeGreaterThan(i);var s=t();expect(s.matcherName).toEqual("toBeGreaterThan"),expect(s.passed()).toFail(),expect(s.message).toMatch(jasmine.pp(n)+" to be greater than"),expect(s.message).toMatch(jasmine.pp(i)),expect(s.actual).toEqual(n),expect(s.expected).toEqual(i)}),describe("toBeCloseTo",function(){it("returns 'true' iff actual and expected are equal within 2 decimal points of precision",function(){expect(0).toBeCloseTo(0),expect(1).toBeCloseTo(1),expect(1).not.toBeCloseTo(1.1),expect(1).not.toBeCloseTo(1.01),expect(1).toBeCloseTo(1.001),expect(1.23).toBeCloseTo(1.234),expect(1.23).toBeCloseTo(1.233),expect(1.23).toBeCloseTo(1.232),expect(1.23).not.toBeCloseTo(1.24),expect(-1.23).toBeCloseTo(-1.234),expect(-1.23).not.toBeCloseTo(-1.24)}),it("expects close numbers to 'be close' and further numbers not to",function(){expect(1.225).not.toBeCloseTo(1.234),expect(1.225).toBeCloseTo(1.224)}),it("accepts an optional precision argument",function(){expect(1).toBeCloseTo(1.1,0),expect(1.2).toBeCloseTo(1.23,1),expect(1.234).toBeCloseTo(1.2343,3),expect(1.234).not.toBeCloseTo(1.233,3)}),it("rounds",function(){expect(1.23).toBeCloseTo(1.229),expect(1.23).toBeCloseTo(1.226),expect(1.23).toBeCloseTo(1.225),expect(1.23).not.toBeCloseTo(1.2249999),expect(1.23).toBeCloseTo(1.234),expect(1.23).toBeCloseTo(1.2349999),expect(1.23).not.toBeCloseTo(1.235),expect(-1.23).toBeCloseTo(-1.234),expect(-1.23).not.toBeCloseTo(-1.235),expect(-1.23).not.toBeCloseTo(-1.236)})}),describe("toThrow",function(){describe("when code block throws an exception",function(){var n;beforeEach(function(){n=function(){throw new Error("Fake Error")}}),it("should match any exception",function(){expect(e(n).toThrow()).toPass()}),it("should match exceptions specified by message",function(){expect(e(n).toThrow("Fake Error")).toPass(),expect(e(n).toThrow("Other Error")).toFail(),expect(t().message).toMatch("Other Error")}),it("should match exceptions specified by Error",function(){expect(e(n).toThrow(new Error("Fake Error"))).toPass(),expect(e(n).toThrow(new Error("Other Error"))).toFail(),expect(t().message).toMatch("Other Error")}),describe("and matcher is inverted with .not",function(){it("should match any exception",function(){expect(e(n).not.toThrow()).toFail(),expect(t().message).toMatch(/Expected function not to throw an exception/)}),it("should match exceptions specified by message",function(){expect(e(n).not.toThrow("Fake Error")).toFail(),expect(e(n).not.toThrow("Other Error")).toPass()}),it("should match exceptions specified by Error",function(){expect(e(n).not.toThrow(new Error("Fake Error"))).toFail(),expect(e(n).not.toThrow(new Error("Other Error"))).toPass()})})}),describe("when actual is not a function",function(){it("should fail with an exception",function(){var t=n(function(){e("not-a-function").toThrow()});expect(t).toBeDefined(),expect(t.message).toEqual("Actual is not a function")}),describe("and matcher is inverted with .not",function(){it("should fail with an exception",function(){var t=n(function(){e("not-a-function").not.toThrow()});expect(t).toBeDefined(),expect(t.message).toEqual("Actual is not a function")})})}),describe("when code block does not throw an exception",function(){it("should fail (or pass when inverted with .not)",function(){expect(e(function(){}).toThrow()).toFail(),expect(t().message).toEqual("Expected function to throw an exception.")})})}),describe(".not.matcher",function(){it("should invert the sense of any matcher",function(){expect(e(37).not.toBeGreaterThan(42)).toPass(),expect(e(42).not.toBeGreaterThan(37)).toFail(),expect(e("abc").not.toEqual("def")).toPass(),expect(e("abc").not.toEqual("abc")).toFail()}),it("should provide an inverted default message",function(){e(37).not.toBeGreaterThan(42),expect(t().message).toEqual("Passed."),e(42).not.toBeGreaterThan(37),expect(t().message).toEqual("Expected 42 not to be greater than 37.")}),it("should use the second message when the matcher sets an array of custom messages",function(){i.addMatchers({custom:function(){return this.message=function(){return["Expected it was called.","Expected it wasn't called."]},this.actual}}),e(!0).custom(),expect(t().message).toEqual("Passed."),e(!1).custom(),expect(t().message).toEqual("Expected it was called."),e(!0).not.custom(),expect(t().message).toEqual("Expected it wasn't called."),e(!1).not.custom(),expect(t().message).toEqual("Passed.")})}),describe("spy matchers >>",function(){function n(t){return function(){expect(function(){e(i.normalFunction)[t]()}).toThrow("Expected a spy, but got Function."),expect(function(){e(jasmine.undefined)[t]()}).toThrow("Expected a spy, but got undefined."),expect(function(){e({some:"object"})[t]()}).toThrow("Expected a spy, but got { some : 'object' }."),expect(function(){e("<b>")[t]()}).toThrow("Expected a spy, but got '<b>'.")}}var i;beforeEach(function(){i={normalFunction:function(){},spyFunction:jasmine.createSpy("My spy")}}),describe("toHaveBeenCalled",function(){it("should pass if the spy was called",function(){expect(e(i.spyFunction).toHaveBeenCalled()).toFail(),i.spyFunction(),expect(e(i.spyFunction).toHaveBeenCalled()).toPass()}),it("should throw an exception when invoked with any arguments",function(){expect(function(){e(i.normalFunction).toHaveBeenCalled("unwanted argument")}).toThrow("toHaveBeenCalled does not take arguments, use toHaveBeenCalledWith")}),it("should throw an exception when invoked on a non-spy",n("toHaveBeenCalled"))}),describe("wasCalled",function(){it("should alias toHaveBeenCalled",function(){spyOn(i,"normalFunction"),i.normalFunction(),expect(i.normalFunction).wasCalled()})}),describe("wasNotCalled",function(){it("should pass iff the spy was not called",function(){expect(e(i.spyFunction).wasNotCalled()).toPass(),i.spyFunction(),expect(e(i.spyFunction).wasNotCalled()).toFail()}),it("should throw an exception when invoked with any arguments",function(){expect(function(){e(i.normalFunction).wasNotCalled("unwanted argument")}).toThrow("wasNotCalled does not take arguments")}),it("should throw an exception when invoked on a non-spy",n("wasNotCalled"))}),describe("toHaveBeenCalledWith",function(){it("toHaveBeenCalledWith should return true if it was called with the expected args",function(){i.spyFunction("a","b","c"),expect(e(i.spyFunction).toHaveBeenCalledWith("a","b","c")).toPass()}),it("should return false if it was not called with the expected args",function(){i.spyFunction("a","b","c");var n=e(i.spyFunction);expect(n.toHaveBeenCalledWith("c","b","a")).toFail();var r=t();expect(r.passed()).toFail(),expect(r.expected).toEqual(["c","b","a"]),expect(r.actual.mostRecentCall.args).toEqual(["a","b","c"]),expect(r.message).toContain(jasmine.pp(r.expected)),expect(r.message).toContain(jasmine.pp(r.actual.mostRecentCall.args))}),it("should return false if it was not called",function(){var n=e(i.spyFunction);expect(n.toHaveBeenCalledWith("c","b","a")).toFail();var r=t();expect(r.passed()).toFail(),expect(r.expected).toEqual(["c","b","a"]),expect(r.actual.argsForCall).toEqual([]),expect(r.message).toContain(jasmine.pp(r.expected))}),it("should allow matches across multiple calls",function(){i.spyFunction("a","b","c"),i.spyFunction("d","e","f");var t=e(i.spyFunction);expect(t.toHaveBeenCalledWith("a","b","c")).toPass(),expect(t.toHaveBeenCalledWith("d","e","f")).toPass(),expect(t.toHaveBeenCalledWith("x","y","z")).toFail()}),it("should return a decent message",function(){i.spyFunction("a","b","c"),i.spyFunction("d","e","f");var n=e(i.spyFunction);expect(n.toHaveBeenCalledWith("a","b")).toFail(),expect(t().message).toEqual("Expected spy My spy to have been called with [ 'a', 'b' ] but actual calls were [ 'a', 'b', 'c' ], [ 'd', 'e', 'f' ]")}),it("should return a decent message when it hasn't been called",function(){var n=e(i.spyFunction);expect(n.toHaveBeenCalledWith("a","b")).toFail(),expect(t().message).toEqual("Expected spy My spy to have been called with [ 'a', 'b' ] but it was never called.")}),it("should return a decent message when inverted",function(){i.spyFunction("a","b","c"),i.spyFunction("d","e","f");var n=e(i.spyFunction);expect(n.not.toHaveBeenCalledWith("a","b","c")).toFail(),expect(t().message).toEqual("Expected spy My spy not to have been called with [ 'a', 'b', 'c' ] but it was.")}),it("should throw an exception when invoked on a non-spy",n("toHaveBeenCalledWith")),describe("to build an ExpectationResult",function(){beforeEach(function(){var e,t;e=r.describe("default current suite",function(){t=r.it()},t),i={someFunction:function(e,t){}},t.spyOn(i,"someFunction")}),it("should should handle the case of a spy",function(){i.someFunction("a","c");var n=e(i.someFunction);n.toHaveBeenCalledWith("a","b");var r=t();expect(r.matcherName).toEqual("toHaveBeenCalledWith"),expect(r.passed()).toFail(),expect(r.message).toContain(jasmine.pp(["a","b"])),expect(r.message).toContain(jasmine.pp(["a","c"])),expect(r.actual).toEqual(i.someFunction),expect(r.expected).toEqual(["a","b"])})})}),describe("wasCalledWith",function(){it("should alias toHaveBeenCalledWith",function(){spyOn(i,"normalFunction"),i.normalFunction(123),expect(i.normalFunction).wasCalledWith(123)})}),describe("wasNotCalledWith",function(){it("should return true if the spy was NOT called with the expected args",function(){i.spyFunction("a","b","c"),expect(e(i.spyFunction).wasNotCalledWith("c","b","a")).toPass()}),it("should return false if it WAS called with the expected args",function(){i.spyFunction("a","b","c");var n=e(i.spyFunction);expect(n.wasNotCalledWith("a","b","c")).toFail();var r=t();expect(r.passed()).toFail(),expect(r.expected).toEqual(["a","b","c"]),expect(r.actual.mostRecentCall.args).toEqual(["a","b","c"]),expect(r.message).toContain(jasmine.pp(r.expected))}),it("should return true if it was not called",function(){var t=e(i.spyFunction);expect(t.wasNotCalledWith("c","b","a")).toPass()}),it("should allow matches across multiple calls",function(){var t=e(i.spyFunction);i.spyFunction("a","b","c"),i.spyFunction("d","e","f"),expect(t.wasNotCalledWith("a","b","c")).toFail(),expect(t.wasNotCalledWith("d","e","f")).toFail(),expect(t.wasNotCalledWith("x","y","z")).toPass()}),it("should throw an exception when invoked on a non-spy",n("wasNotCalledWith"))})}),describe("ObjectContaining",function(){describe("with an empty object",function(){var e;beforeEach(function(){e=new jasmine.Matchers.ObjectContaining({})}),it("matches everything",function(){expect(e.jasmineMatches("foo",[],[])).toBe(!0)}),it("says it didn't expect to contain anything",function(){expect(e.jasmineToString()).toEqual("<jasmine.objectContaining({  })>")})}),describe("with an object with items in it",function(){var e,t,n;beforeEach(function(){t=[],n=[],e=new jasmine.Matchers.ObjectContaining({foo:"fooVal",bar:"barVal"})}),it("doesn't match an empty object",function(){expect(e.jasmineMatches({},t,n)).toBe(!1)}),it("doesn't match an object with none of the specified options",function(){expect(e.jasmineMatches({baz:"stuff"},t,n)).toBe(!1)}),it("adds a message for each missing key",function(){e.jasmineMatches({foo:"fooVal"},t,n),expect(t.length).toEqual(1)}),it("doesn't match an object when the values are different",function(){expect(e.jasmineMatches({foo:"notFoo",bar:"notBar"},t,n)).toBe(!1)}),it("adds a message when values don't match",function(){e.jasmineMatches({foo:"fooVal",bar:"notBar"},t,n),expect(n.length).toEqual(1)}),it("doesn't match an object with only one of the values matching",function(){expect(e.jasmineMatches({foo:"notFoo",bar:"barVal"},t,n)).toBe(!1)}),it("matches when all the values are the same",function(){expect(e.jasmineMatches({foo:"fooVal",bar:"barVal"},t,n)).toBe(!0)}),it("matches when there are additional values",function(){expect(e.jasmineMatches({foo:"fooVal",bar:"barVal",baz:"bazVal"},t,n)).toBe(!0)}),it("doesn't modify missingKeys or missingValues when match is successful",function(){e.jasmineMatches({foo:"fooVal",bar:"barVal"},t,n),expect(t.length).toEqual(0),expect(n.length).toEqual(0)}),it("says what it expects to contain",function(){expect(e.jasmineToString()).toEqual("<jasmine.objectContaining("+jasmine.pp({foo:"fooVal",bar:"barVal"})+")>")})}),describe("in real life",function(){var e;beforeEach(function(){e=jasmine.createSpy("method"),e({a:"b",c:"d"})}),it("works correctly for positive matches",function(){expect(e).toHaveBeenCalledWith(jasmine.objectContaining({a:"b"}))}),it("works correctly for negative matches",function(){expect(e).not.toHaveBeenCalledWith(jasmine.objectContaining({z:"x"}))})})}),describe("Matchers.Any",function(){var e;describe(".jasmineToString",function(){describe("with Object",function(){it("says it's looking for an object",function(){e=jasmine.any(Object),expect(e.jasmineToString().replace(/\n/g,"")).toMatch(/<jasmine\.any\(function Object.*\)>/)})}),describe("with Function",function(){it("says it's looking for a function",function(){e=jasmine.any(Function),expect(e.jasmineToString().replace(/\n/g,"")).toMatch(/<jasmine\.any\(function Function.*\)>/)})}),describe("with String",function(){it("says it's looking for a string",function(){e=jasmine.any(String),expect(e.jasmineToString().replace(/\n/g,"")).toMatch(/<jasmine\.any\(function String.*\)>/)})}),describe("with Number",function(){it("says it's looking for a number",function(){e=jasmine.any(Number),expect(e.jasmineToString().replace(/\n/g,"")).toMatch(/<jasmine\.any\(function Number.*\)>/)})}),describe("with some other defined 'class'",function(){it("says it's looking for an object",function(){function t(){}e=jasmine.any(t),expect(e.jasmineToString().replace("\n","")).toMatch(/<jasmine\.any\(function MyClass.*\)>/)})})}),describe(".jasmineMatches",function(){describe("with Object",function(){beforeEach(function(){e=jasmine.any(Object)}),it("matches an empty object",function(){expect(e.jasmineMatches({})).toEqual(!0)}),it("matches a newed up object",function(){expect(e.jasmineMatches(new Object)).toEqual(!0)}),it("doesn't match a string",function(){expect(e.jasmineMatches("")).toEqual(!1)}),it("doesn't match a number",function(){expect(e.jasmineMatches(123)).toEqual(!1)}),it("doesn't match a function",function(){expect(e.jasmineMatches(function(){})).toEqual(!1)})}),describe("with Function",function(){beforeEach(function(){e=jasmine.any(Function)}),it("doesn't match an object",function(){expect(e.jasmineMatches({})).toEqual(!1)}),it("doesn't match a string",function(){expect(e.jasmineMatches("")).toEqual(!1)}),it("doesn't match a number",function(){expect(e.jasmineMatches(123)).toEqual(!1)}),it("matches a function",function(){expect(e.jasmineMatches(function(){})).toEqual(!0)})}),describe("with Number",function(){beforeEach(function(){e=jasmine.any(Number)}),it("doesn't match an object",function(){expect(e.jasmineMatches({})).toEqual(!1)}),it("doesn't match a string",function(){expect(e.jasmineMatches("")).toEqual(!1)}),it("matches a number",function(){expect(e.jasmineMatches(123)).toEqual(!0)}),it("doesn't match a function",function(){expect(e.jasmineMatches(function(){})).toEqual(!1)})}),describe("with String",function(){beforeEach(function(){e=jasmine.any(String)}),it("doesn't match an object",function(){expect(e.jasmineMatches({})).toEqual(!1)}),it("matches a string",function(){expect(e.jasmineMatches("")).toEqual(!0)}),it("doesn't match a number",function(){expect(e.jasmineMatches(123)).toEqual(!1)}),it("doesn't match a function",function(){expect(e.jasmineMatches(function(){})).toEqual(!1)})}),describe("with some defined 'class'",function(){function t(){}beforeEach(function(){e=jasmine.any(t)}),it("doesn't match an object",function(){expect(e.jasmineMatches({})).toEqual(!1)}),it("doesn't match a string",function(){expect(e.jasmineMatches("")).toEqual(!1)}),it("doesn't match a number",function(){expect(e.jasmineMatches(123)).toEqual(!1)}),it("doesn't match a function",function(){expect(e.jasmineMatches(function(){})).toEqual(!1)}),it("matches an instance of the defined class",function(){expect(e.jasmineMatches(new t)).toEqual(!0)})})})}),describe("all matchers",function(){it("should return null, for future-proofing, since we might eventually allow matcher chaining",function(){expect(e(!0).toBe(!0)).toBeUndefined()})})});